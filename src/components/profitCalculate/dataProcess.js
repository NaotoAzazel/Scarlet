/** 
  * @param {string} args
  * @returns {Array} - –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ,
  *  —Ç–∞–∫ –∂–µ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –∏ –Ω–∞ —á—Ç–æ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç
*/
export default function inputDataProcess(args) {
  const itemNameRegex = /(?<=\:).+?(?=\:)/g; // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —ç–º–æ–¥–∑–∏
  const separatorPatterns = new Set(["üëâ", "üëâüèª", "üëâüèº", "üëâüèΩ", "üëâüèæ", "üëâüèø"]);
  
  let itemsBeforeSeparator = [], itemsAfterSeparator = [];
  let trading = "", lf = "";

  let separatorEncountered = false;  
  for(let i = 0; i < args.length; i++) {
    if(separatorPatterns.has(args[i])) {
      separatorEncountered = true;
      continue;
    }
  
    if(!separatorEncountered) {
      itemsBeforeSeparator.push(args[i].match(itemNameRegex)[0]);
      trading += `<${args[i]}> `;
    } else {
      itemsAfterSeparator.push(args[i].match(itemNameRegex)[0]);
      lf += `<${args[i]}> `;
    };
  };
  
  return {
    itemsBeforeSeparator, 
    itemsAfterSeparator,
    trading,
    lf,
  };
}  
