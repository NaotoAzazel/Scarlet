const handleErrors = require("./handleError");

/** 
  * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤–≤–µ–¥–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
  * @param {string} args - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  * @returns {object} –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ,
  *  —Ç–∞–∫ –∂–µ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –∏ –Ω–∞ —á—Ç–æ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç
*/
function inputDataProcess(args) {
  const fruitName = /(?<=\:).+?(?=\:)/g; // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —ç–º–æ–¥–∑–∏
  let numOfArgs = args.length, posOfSeparator = 0, itemsBeforeSeparator = [], itemsAfterSeparator = [];
  let trading = "", lf = "";

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –≤ —Å–ª—É—á–∞–µ –∏—Ö –Ω–∞—è–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º—É
  if(handleErrors(args).length)
    throw new Error(handleErrors(args));

  // –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  while(1) {
    if(args[posOfSeparator].indexOf("üëâ") >= 0) 
      break;
    else
      posOfSeparator++;
  }

  let l = 0;
  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
  for(l; l < posOfSeparator; l++) {
    itemsBeforeSeparator.push(args[l].match(fruitName)[0]);
    trading += `<${args[l]}>` + " ";
  };
  l++ // –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –º–∞—Å—Å–∏–≤
  
  for(l; l < numOfArgs; l++) {
    itemsAfterSeparator.push(args[l].match(fruitName)[0]);
    lf += `<${args[l]}>` + " ";
  }

  return {
    itemsBeforeSeparator, 
    itemsAfterSeparator,
    tradeResult: trading,
    lfResult: lf,
  };
}  

module.exports = inputDataProcess;
