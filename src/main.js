
require("dotenv").config();

const inputDataProcess = require("./components/dataProcess");
const profitCalculate = require("./components/profitCalculate");
const utils = require("./components/utils");

const TOKEN = process.env.TOKEN;

// Setup AI library
const { Configuration, OpenAIApi } = require("openai");
const configuration = new Configuration({
  apiKey: process.env.OPENAI_KEY,
});

const openAI = new OpenAIApi(configuration);

// Setup discord library
const { Client, EmbedBuilder, GatewayIntentBits, PermissionFlagsBits } = require("discord.js");
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ]
});

// Print a message about the successful bot start
client.on("ready", () => {
  console.log("Bot online")
});

// –ò–ò –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
// client.on("messageCreate", async(message) => {
//   if(!message.member.permissions.has(PermissionFlagsBits.Administrator) && !message.content.startsWith(`<@${client.user.id}>`)) return;
//   if(message.author.bot) return;
  
//   let conversationLog = [{role: "system", content: "You are a friendly chatbot."}];
  
//   // –∑–∞–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤
//   conversationLog.push({
//     role: "user",
//     content: message.content.slice(22) // –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞ 22, —á—Ç–æ–±—ã —É–±—Ä–∞–ª—Å—è –ø–∏–Ω–≥(<@botId>) –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
//   });
  
//   // –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
//   await message.channel.sendTyping();

//   // –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API-–∑–∞–ø—Ä–æ—Å–∞ 
//   const response = await openAI.createChatCompletion({
//     model: "davinci",
//     messages: conversationLog,
//   });
  
//   // –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//   message.reply(response.data.choices[0].message);
  
//   // –ù–∞–¥–µ—é—Å—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç 
//   // –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∏ –¥–∞–ª—å—à–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ—Ç–∞
// })

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏
client.on("messageCreate", async(message) => {
  if(message.author.bot || message.channelId !== process.env.TRADE_CHANNEL) return;
  const tradePromptString = /<:[^:]+:\d+>(?:\s*<:[^:]+:\d+>)*\s*üëâ\s*<:[^:]+:\d+>(?:\s*<:[^:]+:\d+>)*/;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –æ–±—ã—á–Ω—ã–º –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º
  if(!tradePromptString.test(message.content)) 
    return;

  const args = message.content.split(/<(.*?)\>/g).filter(text => text !== " ").filter(Boolean);

  // –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–ª–∏—Å—å —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã
  const lastModifiedDate = utils.getLastModifiedTime("itemPrice.json");
  const discordTimestamp = utils.getDiscordTimestamp(lastModifiedDate);

  // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–¥—Å—á–µ—Ç –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const { tradeResult, lfResult, itemsBeforeSeparator, itemsAfterSeparator } = inputDataProcess(args);
    const { sumBefore, sumAfter, profit, embedColor, tradeStatus } = profitCalculate(itemsBeforeSeparator, itemsAfterSeparator);
    
    const replyEmbed = new EmbedBuilder()
      .setAuthor({name: `${tradeStatus} trade | You ${tradeStatus == "FAIR" ? "GET" : tradeStatus} ${Math.abs(profit).toFixed(2)}% from this trade` })
      .addFields(
        {name: `Trading: ${sumBefore}`, value: tradeResult, inline: true},
        {name: `LF: ${sumAfter}`, value: lfResult, inline: true},
        {name: `Item prices were updated: ${discordTimestamp}`, value: " "}
      )
      .setFooter({text: "Values aren't exact, follow this advice at your own risk"})
      .setColor(embedColor)

    message.reply({embeds: [replyEmbed]});
  } catch(error) {
    console.log(error.message);
  }
})

client.login(TOKEN)
